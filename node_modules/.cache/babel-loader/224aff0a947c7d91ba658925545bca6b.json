{"ast":null,"code":"import _defineProperty from \"Q:\\\\IT-kam\\\\socnet\\\\Social-Network\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from 'redux-form';\nconst SET_USER_DATA = 'auth/SET-USER-DATA';\nconst GET_CAPTCHA_URL = 'auth/GET-CAPTCHA-URL';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null //if null, then captcha is not required\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread({}, state, {}, action.payload);\n\n    case GET_CAPTCHA_URL:\n      return _objectSpread({}, state, {}, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      userId,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const getCaptchaUrlSuccess = captchaUrl => {\n  return {\n    type: GET_CAPTCHA_URL,\n    payload: {\n      captchaUrl\n    }\n  };\n};\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let _response$data$data = response.data.data,\n        id = _response$data$data.id,\n        email = _response$data$data.email,\n        login = _response$data$data.login;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  let response = await securityAPI.getCaptchaUrl();\n  let captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["Q:/IT-kam/socnet/Social-Network/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","getCaptchaUrl","message","messages","length","_error","url","logout"],"mappings":"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","sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from 'redux-form'\r\n\r\nconst SET_USER_DATA = 'auth/SET-USER-DATA';\r\nconst GET_CAPTCHA_URL = 'auth/GET-CAPTCHA-URL';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null, //if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        case GET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            userId,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    }\r\n};\r\nexport const getCaptchaUrlSuccess = (captchaUrl) => {\r\n    return {\r\n        type: GET_CAPTCHA_URL,\r\n        payload: {captchaUrl}\r\n    }\r\n};\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit('login', {_error: message}));\r\n    }\r\n};\r\nexport const getCaptchaUrl = () => async (dispatch) => {\r\n    let response = await securityAPI.getCaptchaUrl();\r\n    let captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n};\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}