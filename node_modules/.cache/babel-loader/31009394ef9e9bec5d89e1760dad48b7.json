{"ast":null,"code":"import * as axios from \"axios\"; // Перевести все апишки на вариативные исходы\n\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    \"API-KEY\": \"9ae69435-2b9a-40bc-b874-7a6c240dae36\"\n  }\n});\nexport const dialogsAPI = {\n  async getDialogs() {\n    const response = await instance.get(\"dialogs/\");\n    return response; // [\n    // {\n    //     \"id\": 1570,\n    //     \"userName\": \"Gaypt1994\",\n    //     \"hasNewMessages\": false,\n    //     \"lastDialogActivityDate\": \"2019-12-08T08:58:57.967\",\n    //     \"lastUserActivityDate\": \"2019-12-07T19:12:19.397\",\n    //     \"newMessagesCount\": 0,\n    //     \"photos\": {\n    //     \"small\": \"https://social-network.samuraijs.com/activecontent/images/users/1570/user-small.jpg?v=1\",\n    //         \"large\": \"https://social-network.samuraijs.com/activecontent/images/users/1570/user.jpg?v=1\"\n    // }\n    // }\n    // ]\n  },\n\n  async initialDialog(userId) {\n    const response = await instance.put(\"dialogs/\".concat(userId));\n    return response; //{\n    //     \"data\": {},\n    //     \"messages\": [],\n    //     \"resultCode\": 0\n    // }\n  },\n\n  async _sendMessage(userId = 1567) {\n    const response = await instance.post(\"dialogs/\".concat(userId, \"/messages\"), {\n      body: 'Hello, Igor'\n    });\n    return response;\n  }\n\n};\nexport const usersAPI = {\n  getUsers: (currentPage = 1, pageSize = 5) => {\n    return instance.get(\"users?page=\".concat(currentPage, \"&count=\").concat(pageSize)).then(response => {\n      return response.data;\n    });\n  },\n\n  follow(userId) {\n    return instance.post(\"follow/\".concat(userId));\n  },\n\n  unfollow(userId) {\n    return instance.delete(\"follow/\".concat(userId));\n  },\n\n  getProfile(userId) {\n    console.warn('Obsolete method. Please profileAPI object.');\n    return profileAPI.getProfile(userId);\n  }\n\n};\nexport const profileAPI = {\n  getProfile(userId) {\n    return instance.get(\"profile/\" + userId);\n  },\n\n  getStatus(userId) {\n    return instance.get(\"profile/status/\" + userId);\n  },\n\n  updateStatus(status) {\n    return instance.put(\"profile/status\", {\n      status: status\n    });\n  },\n\n  savePhoto(photoFile) {\n    const formData = new FormData();\n    formData.append('image', photoFile);\n    return instance.put(\"profile/photo\", formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n\n  saveProfile(profile) {\n    return instance.put(\"profile\", profile);\n  }\n\n};\nexport const authAPI = {\n  me() {\n    return instance.get(\"auth/me\");\n  },\n\n  login(email, password, rememberMe = false, captcha = null) {\n    return instance.post(\"auth/login\", {\n      email,\n      password,\n      rememberMe,\n      captcha\n    });\n  },\n\n  logout() {\n    return instance.delete(\"auth/login\");\n  }\n\n};\nlet errorAuth;\ninstance.interceptors.response.use(response => response, error => {\n  if (error.response.status === 401) {\n    errorAuth();\n  }\n\n  return Promise.reject(error);\n});\nexport const setHandler = callback => {\n  errorAuth = callback;\n};\nexport const securityAPI = {\n  getCaptchaUrl() {\n    return instance.get(\"security/get-captcha-url\");\n  }\n\n};","map":{"version":3,"sources":["Q:\\IT-kam\\my projects\\Social-Network\\src\\api\\api.js"],"names":["axios","instance","create","withCredentials","baseURL","headers","dialogsAPI","getDialogs","response","get","initialDialog","userId","put","_sendMessage","post","body","usersAPI","getUsers","currentPage","pageSize","then","data","follow","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","errorAuth","interceptors","use","error","Promise","reject","setHandler","callback","securityAPI","getCaptchaUrl"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\r\n\r\n// Перевести все апишки на вариативные исходы\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"9ae69435-2b9a-40bc-b874-7a6c240dae36\"\r\n    }\r\n});\r\n\r\nexport const dialogsAPI = {\r\n    async getDialogs() {\r\n        const response = await instance.get(`dialogs/`);\r\n        return response\r\n        // [\r\n        // {\r\n        //     \"id\": 1570,\r\n        //     \"userName\": \"Gaypt1994\",\r\n        //     \"hasNewMessages\": false,\r\n        //     \"lastDialogActivityDate\": \"2019-12-08T08:58:57.967\",\r\n        //     \"lastUserActivityDate\": \"2019-12-07T19:12:19.397\",\r\n        //     \"newMessagesCount\": 0,\r\n        //     \"photos\": {\r\n        //     \"small\": \"https://social-network.samuraijs.com/activecontent/images/users/1570/user-small.jpg?v=1\",\r\n        //         \"large\": \"https://social-network.samuraijs.com/activecontent/images/users/1570/user.jpg?v=1\"\r\n        // }\r\n        // }\r\n        // ]\r\n    },\r\n    async initialDialog(userId) {\r\n        const response = await instance.put(`dialogs/${userId}`);\r\n        return response\r\n        //{\r\n        //     \"data\": {},\r\n        //     \"messages\": [],\r\n        //     \"resultCode\": 0\r\n        // }\r\n    },\r\n    async _sendMessage(userId = 1567) {\r\n        const response = await instance.post(`dialogs/${userId}/messages`,\r\n        {\r\n            body: 'Hello, Igor'\r\n        });\r\n        return response\r\n    },\r\n};\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage = 1, pageSize = 5) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        console.warn('Obsolete method. Please profileAPI object.');\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n};\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(photoFile) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile) {\r\n        return instance.put(`profile`, profile)\r\n    }\r\n};\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false, captcha = null) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n};\r\n\r\nlet errorAuth;\r\n\r\ninstance.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        if (error.response.status === 401) {\r\n            errorAuth()\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n);\r\n\r\nexport const setHandler = (callback) => {\r\n    errorAuth = callback;\r\n};\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    },\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}